-- Code your design here
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity temporizador is
port(
	clk		: in std_logic;
    reset	: in std_logic;
    en		: in std_logic;
    val		: in unsigned(255 downto 0);
    fin		: out std_logic;
);
end temporizador;

architecture modular of temporizador is
	signal clk_i		: std_logic;
    signal cnt_out_i	: unsigned(val'range);

	component comparador is
	port(
		in_1	: IN unsigned(255 downto 0);
        igual: OUT STD_LOGIC;
		mayor: OUT STD_LOGIC;
		menor: OUT STD_LOGIC
    );
    end component;
    
    component freq_div is
	generic(modulo:positive:=2);
	port(
        clk_in	: in std_logic;
        reset	: in std_logic;
        EN		: in std_logic;
	 	clk_out : out std_logic
	);  
    end component;
    
    component contador is
 	port (
 		reset	: in std_logic;
        clk 	: in std_logic;
        en		: in std_logic;
        val		: in unsigned(255 downto 0);
 		cnt 	: out unsigned(255 downto 0);
 	);
    end component;
  
begin 

	fdiv: freq_div 
    generic map(modulo => 5)
    port map(
        clk_in => clk,
        reset => reset,
        EN => en,
        clk_out => clk_i
    ); 
    
    cmp: comparador port map(
    	in_1 => cnt_out_i,
        igual => fin
    );
    
    cnt: contador port map(
 		reset => reset,
        clk => clk_i,
        en	=> en,
        val	=> val,
 		cnt => cnt_out_i
 	);
end modular;

--Contador 
library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity contador is
 	port (
 		reset	: in std_logic;
        clk 	: in std_logic;
        en		: in std_logic;
        val		: in unsigned(255 downto 0);
 		cnt 	: out unsigned(255 downto 0);
 );
end contador;

architecture behavioural of contador is
	signal cnt_i : unsigned(cnt'range);
begin
 	counter: process (reset, clk)
 		begin
 			if reset = '1' then
            	cnt_i <= val;
            elsif rising_edge(clk) then
            	if en = '1' then
                	if cnt_i>0 then 
 						cnt_i <= cnt_i - 1;
                    end if;
                end if;
 			end if;
 	end process;
    cnt <= cnt_i;
end behavioural;

--Divisor de frecuencias
library IEEE;
use IEEE.std_logic_1164.all;

entity freq_div is
	generic(modulo:positive:=2);
	port(clk_in, reset, EN: in std_logic;
	 clk_out : out std_logic
	);
end freq_div;

architecture Behavioral of freq_div is
signal clk_out_signal:std_logic;

begin --arch
	process(clk_in, reset, EN) 
    variable contador: positive := modulo+1; --positive va de 1 a nosecuantos
    begin -- process
    	if reset='1' then -- if reset
            clk_out_signal <= '0';
            clk_out<=clk_out_signal;
            contador := modulo;-- si hago un subtipo podrÃ­a hacer subtipo'high
         elsif clk_in'event and clk_in='1' then --flanco de subida, tb risign_edg(clk_in)
         	if EN='1' then --if enable 
            	if contador /= 1 then--if contador --0 si integer, '0' si booleano, "0" si vector
                  contador:= contador-1;
            	else
                  clk_out_signal <= not clk_out_signal; --Toggle
                  contador:= modulo;
               	end if; --if contador
             end if; --if enable
         end if; -- if reset
         clk_out <= clk_out_signal;
    end process; -- process
end behavioral; --arch

--Comparador a cero
library IEEE;
use ieee.std_logic_1164.all;
use IEEE.numeric_std.all;

ENTITY comparador IS
	PORT(
		in_1: IN unsigned(255 downto 0);
        igual: OUT STD_LOGIC;
		mayor: OUT STD_LOGIC;
		menor: OUT STD_LOGIC
    );

END comparador;

ARCHITECTURE arch1 OF comparador IS
BEGIN
	igual <= '1' WHEN in_1 = to_unsigned(0, in_1'length) ELSE '0';
	mayor <= '1' WHEN in_1 > to_unsigned(0, in_1'length) ELSE '0'; 
	menor <= '1' WHEN in_1 < to_unsigned(0, in_1'length) ELSE '0'; 
END arch1;